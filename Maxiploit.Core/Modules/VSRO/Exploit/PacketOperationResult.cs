#region License
// ====================================================
// Maxiploit Copyright(C) 2017 Furkan Türkal
// This program comes with ABSOLUTELY NO WARRANTY; This is free software,
// and you are welcome to redistribute it under certain conditions; See
// file LICENSE, which is part of this source code package, for details.
// ====================================================
#endregion

using System.Collections.Generic;
using Maxiploit.Modules.VSRO.Data;
using Maxiploit.Modules.VSRO.API.SilkroadSecurity;

namespace Maxiploit.Modules.VSRO.Exploit {
    public sealed class PacketOperationResult {

        public PacketOperationType ResultType { get; private set; }

        public List<Packet> Packets { get; private set; }

        public PacketOperationResult(PacketOperationType resultType) {
            this.Packets = new List<Packet>();
            this.ResultType = resultType;
        }

        public PacketOperationResult(Packet packet, PacketOperationType resultType) {
            this.Packets = new List<Packet>();
            this.ResultType = resultType;

            if (this.ResultType != PacketOperationType.REPLACE && this.ResultType != PacketOperationType.INJECT)
                throw new VSROException("[PacketOperationResult::Constructor()]-> Inappropriate result type [{0}]", this.ResultType);

            this.Packets.Add(packet);
        }

        public void AddPacket(Packet packet) {
            if (this.ResultType != PacketOperationType.REPLACE && this.ResultType != PacketOperationType.INJECT)
                throw new VSROException("[PacketOperationResult::AddPacket()]-> Inappropriate result type [{0}]", this.ResultType);

            this.Packets.Add(packet);
        }

        public static bool operator ==(PacketOperationResult lhs, PacketOperationType rhs) {
            if (lhs.ResultType == rhs)
                return true;
            return false;
        }

        public static bool operator !=(PacketOperationResult lhs, PacketOperationType rhs) {
            return !(lhs == rhs);
        }

        public override bool Equals(object obj) {

            var item = obj as PacketOperationResult;

            if (item == null) {
                return false;
            }

            //TODO: Packet kontrolü de mi olacak ?
            return this.ResultType.Equals(item.ResultType) /*&& this.Packets.Equals(item.Packets)*/;
        }

        public override int GetHashCode() {
            unchecked {
                int h = 17;
                h = h * 23 + ResultType.GetHashCode();
                h = h * 23 + Packets.GetHashCode();
                return h;
            }
        }
    }
}
